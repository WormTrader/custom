package com.wormtrader.custom.worms;
/********************************************************************
* @(#)BWWiseMan2AO.java 1.00 20130507
* Copyright © 2013 by Richard T. Salamone, Jr. All rights reserved.
*
* BWWiseMan2AO: Implements the Bill Williams "First Wise Man" as
* described in Trading Chaos 2nd Edition Chapter 9.
*
* @author Rick Salamone
* @version 1.00
* 20130507 rts created
*******************************************************/
import com.wormtrader.bars.Bar;
import com.wormtrader.history.Tape;
import com.wormtrader.history.indicators.AO;
import com.wormtrader.positions.TapeWorm;
import com.wormtrader.positions.*;
import com.shanebow.util.SBFormat;
import com.wormtrader.positions.signals.TradeSignal;

public final class BWWiseMan2AO
	extends TapeWorm
	{
	private static final String BEAR_REV = "\u21E3RB";
	private static final String BULL_REV = "\u21E1RB";
	private static final String UP_FRACTAL_BO = "\u2227BO";
	private static final String DN_FRACTAL_BO = "\u2228BO";

	/**
	* Possible states of this Wise Man worm: Not to be confused
	* with the state of a signal generated by this worm.
	*/
	private static final int WMFLAT=0;
	private static final int WMLONG=1;
	private static final int WMSHORT=2;
	private static final int CANCELED=3; // can order pending

	// following states return true for orderPending()
	private static final int WMLONG_SIG=4;
	private static final int WMSHORT_SIG=5;
	private static final int WMREV_LONG_SIG=6;
	private static final int WMREV_SHORT_SIG=7;

	private int fWMState; // State of the wise man as opposed to the signal's state
	private TradeSignal fMostRecentSignal;
	private AO fAO;

	public void initTape(Tape tape)
		{
		fAO = (AO)tape.addStudy(AO.STUDY_NAME, "");
		}

	public String getShortName() { return "Wise2"; }

	boolean aoGreen(int x) { return fAO.trend(x) > 0; }
	boolean aoRed(int x) { return fAO.trend(x) < 0; }
	boolean sayWrong(int x)
		{
		System.out.println(bar(x).yyyymmdd() + " " + bar(x).hhmm() + ": AO vetoed this signal");
		return false;
		}

	public void automata( int x, Bar bar )
		{
		if ( x < 8 )
			return;

		int value = Math.abs(fAO.getValue(x));
		int prior = fAO.trend(x-1);
		int current = fAO.trend(x);

		if (bar.hhmm().equals("09:30") && value > 10)
			{
			prior = 0;
			}

		if (current == 0 || value < 10)
			return;
//			goFlat("" + prior + "." + current);
		else if (current > prior)
			goLong("" + prior + "." + current);
		else if (prior > current)
			goShort("" + prior + "." + current);

/****
		if (isBearDiSignal(diType, x))
			signal(new W1BearSignal(this, bar, BEAR_REV, WMSHORT_SIG));
		else if (isBullDiSignal(diType, x))
			signal(new W1BullSignal(this, bar, BULL_REV, WMLONG_SIG));
		switch(fWMState)
			{
			case WMFLAT:if (isBearDiSignal(diType, x))
									signal(new W1BearSignal(this, bar, BEAR_REV, WMSHORT_SIG), false);
								else if (isBullDiSignal(diType, x))
									signal(new W1BullSignal(this, bar, BULL_REV, WMLONG_SIG), false);
								return;

			case WMLONG:if (isBearDiSignal(diType, x))
									signal(new W1BearSignal(this, bar, BEAR_REV, WMREV_SHORT_SIG), false);
								return;

			case WMSHORT:if (isBullDiSignal(diType, x))
									signal(new W1BullSignal(this, bar, BULL_REV, WMREV_LONG_SIG), false);
								return;
			}
****/
		}
	}